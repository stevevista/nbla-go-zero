// Copyright (c) 2017 Sony Corporation. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - build-tools/code_generator/templates/src_nbla_cuda_init_cpp_template.cpp
// - build-tools/code_generator/generator/generate_src_nbla_cuda_init_cpp.py

#include <nbla/init.hpp>
#include <nbla/cuda/init.hpp>
#include <nbla/cuda/cuda.hpp>
#include <nbla/cuda/common.hpp>
#include <nbla/array_registry.hpp>
#include <nbla/function_registry.hpp>
#include <nbla/array/cpu_array.hpp>
#include <nbla/cuda/array/cuda_array.hpp>
#include <nbla/cuda/function/affine.hpp>
#include <nbla/cuda/function/convolution.hpp>
#include <nbla/cuda/function/depthwise_convolution.hpp>
#include <nbla/cuda/function/deconvolution.hpp>
#include <nbla/cuda/function/unpooling.hpp>
#include <nbla/cuda/function/embed.hpp>
#include <nbla/cuda/function/sigmoid.hpp>
#include <nbla/cuda/function/swish.hpp>
#include <nbla/cuda/function/tanh.hpp>
#include <nbla/cuda/function/relu.hpp>
#include <nbla/cuda/function/leaky_relu.hpp>
#include <nbla/cuda/function/softmax.hpp>
#include <nbla/cuda/function/elu.hpp>
#include <nbla/cuda/function/selu.hpp>
#include <nbla/cuda/function/crelu.hpp>
#include <nbla/cuda/function/celu.hpp>
#include <nbla/cuda/function/prelu.hpp>
#include <nbla/cuda/function/batch_normalization.hpp>
#include <nbla/cuda/function/mean_subtraction.hpp>
#include <nbla/cuda/function/sum.hpp>
#include <nbla/cuda/function/mean.hpp>
#include <nbla/cuda/function/max.hpp>
#include <nbla/cuda/function/min.hpp>
#include <nbla/cuda/function/prod.hpp>
#include <nbla/cuda/function/reduce_sum.hpp>
#include <nbla/cuda/function/reduce_mean.hpp>
#include <nbla/cuda/function/add2.hpp>
#include <nbla/cuda/function/bc_add2.hpp>
#include <nbla/cuda/function/sub2.hpp>
#include <nbla/cuda/function/mul2.hpp>
#include <nbla/cuda/function/div2.hpp>
#include <nbla/cuda/function/pow2.hpp>
#include <nbla/cuda/function/add_scalar.hpp>
#include <nbla/cuda/function/mul_scalar.hpp>
#include <nbla/cuda/function/pow_scalar.hpp>
#include <nbla/cuda/function/r_sub_scalar.hpp>
#include <nbla/cuda/function/r_div_scalar.hpp>
#include <nbla/cuda/function/r_pow_scalar.hpp>
#include <nbla/cuda/function/sign.hpp>
#include <nbla/cuda/function/minimum2.hpp>
#include <nbla/cuda/function/maximum2.hpp>
#include <nbla/cuda/function/minimum_scalar.hpp>
#include <nbla/cuda/function/maximum_scalar.hpp>
#include <nbla/cuda/function/logical_and.hpp>
#include <nbla/cuda/function/logical_or.hpp>
#include <nbla/cuda/function/logical_xor.hpp>
#include <nbla/cuda/function/equal.hpp>
#include <nbla/cuda/function/not_equal.hpp>
#include <nbla/cuda/function/greater_equal.hpp>
#include <nbla/cuda/function/greater.hpp>
#include <nbla/cuda/function/less_equal.hpp>
#include <nbla/cuda/function/less.hpp>
#include <nbla/cuda/function/logical_and_scalar.hpp>
#include <nbla/cuda/function/logical_or_scalar.hpp>
#include <nbla/cuda/function/logical_xor_scalar.hpp>
#include <nbla/cuda/function/equal_scalar.hpp>
#include <nbla/cuda/function/not_equal_scalar.hpp>
#include <nbla/cuda/function/greater_equal_scalar.hpp>
#include <nbla/cuda/function/greater_scalar.hpp>
#include <nbla/cuda/function/less_equal_scalar.hpp>
#include <nbla/cuda/function/less_scalar.hpp>
#include <nbla/cuda/function/logical_not.hpp>
#include <nbla/cuda/function/abs.hpp>
#include <nbla/cuda/function/exp.hpp>
#include <nbla/cuda/function/log.hpp>
#include <nbla/cuda/function/identity.hpp>
#include <nbla/cuda/function/batch_matmul.hpp>
#include <nbla/cuda/function/concatenate.hpp>
#include <nbla/cuda/function/split.hpp>
#include <nbla/cuda/function/stack.hpp>
#include <nbla/cuda/function/slice.hpp>
#include <nbla/cuda/function/transpose.hpp>
#include <nbla/cuda/function/broadcast.hpp>
#include <nbla/cuda/function/flip.hpp>
#include <nbla/cuda/function/matrix_diag.hpp>
#include <nbla/cuda/function/matrix_diag_part.hpp>
#include <nbla/cuda/function/dropout.hpp>
#include <nbla/cuda/function/rand.hpp>
#include <nbla/cuda/function/randint.hpp>
#include <nbla/cuda/function/randn.hpp>
#include <nbla/cuda/function/image_augmentation.hpp>
#include <nbla/cuda/function/sigmoid_cross_entropy.hpp>
#include <nbla/cuda/function/binary_cross_entropy.hpp>
#include <nbla/cuda/function/softmax_cross_entropy.hpp>
#include <nbla/cuda/function/categorical_cross_entropy.hpp>
#include <nbla/cuda/function/squared_error.hpp>
#include <nbla/cuda/function/absolute_error.hpp>
#include <nbla/cuda/function/huber_loss.hpp>
#include <nbla/cuda/function/epsilon_insensitive_loss.hpp>
#include <nbla/cuda/function/binary_sigmoid.hpp>
#include <nbla/cuda/function/binary_tanh.hpp>
#include <nbla/cuda/function/binary_connect_affine.hpp>
#include <nbla/cuda/function/binary_connect_convolution.hpp>
#include <nbla/cuda/function/inq_affine.hpp>
#include <nbla/cuda/function/inq_convolution.hpp>
#include <nbla/cuda/function/fixed_point_quantize.hpp>
#include <nbla/cuda/function/pow2_quantize.hpp>
#include <nbla/cuda/function/top_n_error.hpp>
#include <nbla/cuda/function/binary_error.hpp>
#include <nbla/cuda/solver/adadelta.hpp>
#include <nbla/cuda/solver/adagrad.hpp>
#include <nbla/cuda/solver/adam.hpp>
#include <nbla/cuda/solver/adamax.hpp>
#include <nbla/cuda/solver/momentum.hpp>
#include <nbla/cuda/solver/nesterov.hpp>
#include <nbla/cuda/solver/rmsprop.hpp>
#include <nbla/cuda/solver/sgd.hpp>

#ifdef FEATURE_DIST_TRAIN
  #include <nbla/cuda/communicator/data_parallel_communicator.hpp>
  #include <nbla/cuda/communicator/multi_process_data_parallel_communicator.hpp>
#endif

#include <nbla/garbage_collector.hpp>

namespace nbla {

void init_cuda() {
  static bool is_initialized = false;
  if (is_initialized)
    return;

  // Init CPU features
  init_cpu();

  // Array registration
  NBLA_REGISTER_ARRAY_CREATOR(CudaArray);
  SingletonManager::get<Cuda>()->register_array_class("CudaArray");
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuArray, CudaArray,
                                   synchronizer_cpu_array_cuda_array);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CudaArray, CpuArray,
                                   synchronizer_cuda_array_cpu_array);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuCachedArray, CudaArray,
                                   synchronizer_cpu_array_cuda_array);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CudaArray, CpuCachedArray,
                                   synchronizer_cuda_array_cpu_array);
  NBLA_REGISTER_ARRAY_CREATOR(CudaCachedArray);
  SingletonManager::get<Cuda>()->register_array_class("CudaCachedArray");
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuArray, CudaCachedArray,
                                   synchronizer_cpu_array_cuda_array);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CudaCachedArray, CpuArray,
                                   synchronizer_cuda_array_cpu_array);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuCachedArray, CudaCachedArray,
                                   synchronizer_cpu_array_cuda_array);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CudaCachedArray, CpuCachedArray,
                                   synchronizer_cuda_array_cpu_array);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CudaCachedArray, CudaArray,
                                   synchronizer_default);
  NBLA_REGISTER_ARRAY_SYNCHRONIZER(CudaArray, CudaCachedArray,
                                   synchronizer_default);

  // Function registration
  typedef AffineCuda<float> AffineCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Affine, AffineCudaf, 1, "cuda", "default", int);
  typedef ConvolutionCuda<float> ConvolutionCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Convolution, ConvolutionCudaf, 1, "cuda", "default", int, const vector<int> &, const vector<int> &, const vector<int> &, int);
  typedef DepthwiseConvolutionCuda<float> DepthwiseConvolutionCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(DepthwiseConvolution, DepthwiseConvolutionCudaf, 1, "cuda", "default", int, const vector<int> &, const vector<int> &, const vector<int> &, int);
  typedef DeconvolutionCuda<float> DeconvolutionCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Deconvolution, DeconvolutionCudaf, 1, "cuda", "default", int, const vector<int> &, const vector<int> &, const vector<int> &, int);
  typedef UnpoolingCuda<float> UnpoolingCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Unpooling, UnpoolingCudaf, 1, "cuda", "default", const vector<int> &);
  typedef EmbedCuda<int, float> EmbedCudaif;
  NBLA_REGISTER_FUNCTION_IMPL(Embed, EmbedCudaif, 1, "cuda", "default");
  typedef SigmoidCuda<float> SigmoidCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Sigmoid, SigmoidCudaf, 1, "cuda", "default");
  typedef SwishCuda<float> SwishCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Swish, SwishCudaf, 1, "cuda", "default");
  typedef TanhCuda<float> TanhCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Tanh, TanhCudaf, 1, "cuda", "default");
  typedef ReLUCuda<float> ReLUCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(ReLU, ReLUCudaf, 1, "cuda", "default", bool);
  typedef LeakyReLUCuda<float> LeakyReLUCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LeakyReLU, LeakyReLUCudaf, 1, "cuda", "default", float);
  typedef SoftmaxCuda<float> SoftmaxCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Softmax, SoftmaxCudaf, 1, "cuda", "default", int);
  typedef ELUCuda<float> ELUCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(ELU, ELUCudaf, 1, "cuda", "default", double);
  typedef SELUCuda<float> SELUCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(SELU, SELUCudaf, 1, "cuda", "default", double, double);
  typedef CReLUCuda<float> CReLUCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(CReLU, CReLUCudaf, 1, "cuda", "default", int);
  typedef CELUCuda<float> CELUCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(CELU, CELUCudaf, 1, "cuda", "default", double, int);
  typedef PReLUCuda<float> PReLUCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(PReLU, PReLUCudaf, 1, "cuda", "default", int);
  typedef BatchNormalizationCuda<float> BatchNormalizationCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BatchNormalization, BatchNormalizationCudaf, 1, "cuda", "default", const vector<int> &, float, float, bool);
  typedef MeanSubtractionCuda<float> MeanSubtractionCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(MeanSubtraction, MeanSubtractionCudaf, 1, "cuda", "default", int, bool);
  typedef SumCuda<float> SumCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Sum, SumCudaf, 1, "cuda", "default", const vector<int> &, bool);
  typedef MeanCuda<float> MeanCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Mean, MeanCudaf, 1, "cuda", "default", const vector<int> &, bool);
  typedef MaxCuda<float> MaxCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Max, MaxCudaf, 1, "cuda", "default", const vector<int> &, bool);
  typedef MinCuda<float> MinCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Min, MinCudaf, 1, "cuda", "default", const vector<int> &, bool);
  typedef ProdCuda<float> ProdCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Prod, ProdCudaf, 1, "cuda", "default", const vector<int> &, bool);
  typedef ReduceSumCuda<float> ReduceSumCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(ReduceSum, ReduceSumCudaf, 1, "cuda", "default");
  typedef ReduceMeanCuda<float> ReduceMeanCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(ReduceMean, ReduceMeanCudaf, 1, "cuda", "default");
  typedef Add2Cuda<float> Add2Cudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Add2, Add2Cudaf, 1, "cuda", "default", bool);
  typedef BcAdd2Cuda<float> BcAdd2Cudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BcAdd2, BcAdd2Cudaf, 1, "cuda", "default");
  typedef Sub2Cuda<float> Sub2Cudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Sub2, Sub2Cudaf, 1, "cuda", "default");
  typedef Mul2Cuda<float> Mul2Cudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Mul2, Mul2Cudaf, 1, "cuda", "default");
  typedef Div2Cuda<float> Div2Cudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Div2, Div2Cudaf, 1, "cuda", "default");
  typedef Pow2Cuda<float> Pow2Cudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Pow2, Pow2Cudaf, 1, "cuda", "default");
  typedef AddScalarCuda<float> AddScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(AddScalar, AddScalarCudaf, 1, "cuda", "default", double);
  typedef MulScalarCuda<float> MulScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(MulScalar, MulScalarCudaf, 1, "cuda", "default", double);
  typedef PowScalarCuda<float> PowScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(PowScalar, PowScalarCudaf, 1, "cuda", "default", double);
  typedef RSubScalarCuda<float> RSubScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(RSubScalar, RSubScalarCudaf, 1, "cuda", "default", double);
  typedef RDivScalarCuda<float> RDivScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(RDivScalar, RDivScalarCudaf, 1, "cuda", "default", double);
  typedef RPowScalarCuda<float> RPowScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(RPowScalar, RPowScalarCudaf, 1, "cuda", "default", double);
  typedef SignCuda<float> SignCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Sign, SignCudaf, 1, "cuda", "default", float);
  typedef Minimum2Cuda<float> Minimum2Cudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Minimum2, Minimum2Cudaf, 1, "cuda", "default");
  typedef Maximum2Cuda<float> Maximum2Cudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Maximum2, Maximum2Cudaf, 1, "cuda", "default");
  typedef MinimumScalarCuda<float> MinimumScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(MinimumScalar, MinimumScalarCudaf, 1, "cuda", "default", double);
  typedef MaximumScalarCuda<float> MaximumScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(MaximumScalar, MaximumScalarCudaf, 1, "cuda", "default", double);
  typedef LogicalAndCuda<float> LogicalAndCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LogicalAnd, LogicalAndCudaf, 1, "cuda", "default");
  typedef LogicalOrCuda<float> LogicalOrCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LogicalOr, LogicalOrCudaf, 1, "cuda", "default");
  typedef LogicalXorCuda<float> LogicalXorCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LogicalXor, LogicalXorCudaf, 1, "cuda", "default");
  typedef EqualCuda<float> EqualCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Equal, EqualCudaf, 1, "cuda", "default");
  typedef NotEqualCuda<float> NotEqualCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(NotEqual, NotEqualCudaf, 1, "cuda", "default");
  typedef GreaterEqualCuda<float> GreaterEqualCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(GreaterEqual, GreaterEqualCudaf, 1, "cuda", "default");
  typedef GreaterCuda<float> GreaterCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Greater, GreaterCudaf, 1, "cuda", "default");
  typedef LessEqualCuda<float> LessEqualCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LessEqual, LessEqualCudaf, 1, "cuda", "default");
  typedef LessCuda<float> LessCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Less, LessCudaf, 1, "cuda", "default");
  typedef LogicalAndScalarCuda<float> LogicalAndScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LogicalAndScalar, LogicalAndScalarCudaf, 1, "cuda", "default", bool);
  typedef LogicalOrScalarCuda<float> LogicalOrScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LogicalOrScalar, LogicalOrScalarCudaf, 1, "cuda", "default", bool);
  typedef LogicalXorScalarCuda<float> LogicalXorScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LogicalXorScalar, LogicalXorScalarCudaf, 1, "cuda", "default", bool);
  typedef EqualScalarCuda<float> EqualScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(EqualScalar, EqualScalarCudaf, 1, "cuda", "default", double);
  typedef NotEqualScalarCuda<float> NotEqualScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(NotEqualScalar, NotEqualScalarCudaf, 1, "cuda", "default", double);
  typedef GreaterEqualScalarCuda<float> GreaterEqualScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(GreaterEqualScalar, GreaterEqualScalarCudaf, 1, "cuda", "default", double);
  typedef GreaterScalarCuda<float> GreaterScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(GreaterScalar, GreaterScalarCudaf, 1, "cuda", "default", double);
  typedef LessEqualScalarCuda<float> LessEqualScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LessEqualScalar, LessEqualScalarCudaf, 1, "cuda", "default", double);
  typedef LessScalarCuda<float> LessScalarCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LessScalar, LessScalarCudaf, 1, "cuda", "default", double);
  typedef LogicalNotCuda<float> LogicalNotCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(LogicalNot, LogicalNotCudaf, 1, "cuda", "default");
  typedef AbsCuda<float> AbsCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Abs, AbsCudaf, 1, "cuda", "default");
  typedef ExpCuda<float> ExpCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Exp, ExpCudaf, 1, "cuda", "default");
  typedef LogCuda<float> LogCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Log, LogCudaf, 1, "cuda", "default");
  typedef IdentityCuda<float> IdentityCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Identity, IdentityCudaf, 1, "cuda", "default");
  typedef BatchMatmulCuda<float> BatchMatmulCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BatchMatmul, BatchMatmulCudaf, 1, "cuda", "default", bool, bool);
  typedef ConcatenateCuda<float> ConcatenateCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Concatenate, ConcatenateCudaf, 1, "cuda", "default", int);
  typedef SplitCuda<float> SplitCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Split, SplitCudaf, 1, "cuda", "default", int);
  typedef StackCuda<float> StackCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Stack, StackCudaf, 1, "cuda", "default", int);
  typedef SliceCuda<float> SliceCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Slice, SliceCudaf, 1, "cuda", "default", const vector<int> &, const vector<int> &, const vector<int> &);
  typedef TransposeCuda<float> TransposeCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Transpose, TransposeCudaf, 1, "cuda", "default", const vector<int> &);
  typedef BroadcastCuda<float> BroadcastCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Broadcast, BroadcastCudaf, 1, "cuda", "default", const vector<int> &);
  typedef FlipCuda<float> FlipCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Flip, FlipCudaf, 1, "cuda", "default", const vector<int> &);
  typedef MatrixDiagCuda<float> MatrixDiagCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(MatrixDiag, MatrixDiagCudaf, 1, "cuda", "default");
  typedef MatrixDiagPartCuda<float> MatrixDiagPartCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(MatrixDiagPart, MatrixDiagPartCudaf, 1, "cuda", "default");
  typedef DropoutCuda<float> DropoutCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Dropout, DropoutCudaf, 1, "cuda", "default", double, int);
  typedef RandCuda<float> RandCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Rand, RandCudaf, 1, "cuda", "default", float, float, const vector<int> &, int);
  typedef RandintCuda<int> RandintCudai;
  NBLA_REGISTER_FUNCTION_IMPL(Randint, RandintCudai, 1, "cuda", "default", int, int, const vector<int> &, int);
  typedef RandnCuda<float> RandnCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Randn, RandnCudaf, 1, "cuda", "default", float, float, const vector<int> &, int);
  typedef ImageAugmentationCuda<float> ImageAugmentationCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(ImageAugmentation, ImageAugmentationCudaf, 1, "cuda", "default", const vector<int> &, const vector<int> &, float, float, float, float, float, bool, bool, float, bool, float, float, bool, float, int);
  typedef SigmoidCrossEntropyCuda<float, int> SigmoidCrossEntropyCudafi;
  NBLA_REGISTER_FUNCTION_IMPL(SigmoidCrossEntropy, SigmoidCrossEntropyCudafi, 1, "cuda", "default");
  typedef BinaryCrossEntropyCuda<float> BinaryCrossEntropyCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BinaryCrossEntropy, BinaryCrossEntropyCudaf, 1, "cuda", "default");
  typedef SoftmaxCrossEntropyCuda<float, int> SoftmaxCrossEntropyCudafi;
  NBLA_REGISTER_FUNCTION_IMPL(SoftmaxCrossEntropy, SoftmaxCrossEntropyCudafi, 1, "cuda", "default", int);
  typedef CategoricalCrossEntropyCuda<float, int> CategoricalCrossEntropyCudafi;
  NBLA_REGISTER_FUNCTION_IMPL(CategoricalCrossEntropy, CategoricalCrossEntropyCudafi, 1, "cuda", "default", int);
  typedef SquaredErrorCuda<float> SquaredErrorCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(SquaredError, SquaredErrorCudaf, 1, "cuda", "default");
  typedef AbsoluteErrorCuda<float> AbsoluteErrorCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(AbsoluteError, AbsoluteErrorCudaf, 1, "cuda", "default");
  typedef HuberLossCuda<float> HuberLossCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(HuberLoss, HuberLossCudaf, 1, "cuda", "default", float);
  typedef EpsilonInsensitiveLossCuda<float> EpsilonInsensitiveLossCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(EpsilonInsensitiveLoss, EpsilonInsensitiveLossCudaf, 1, "cuda", "default", float);
  typedef BinarySigmoidCuda<float> BinarySigmoidCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BinarySigmoid, BinarySigmoidCudaf, 1, "cuda", "default");
  typedef BinaryTanhCuda<float> BinaryTanhCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BinaryTanh, BinaryTanhCudaf, 1, "cuda", "default");
  typedef BinaryConnectAffineCuda<float> BinaryConnectAffineCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BinaryConnectAffine, BinaryConnectAffineCudaf, 1, "cuda", "default", int);
  typedef BinaryConnectConvolutionCuda<float> BinaryConnectConvolutionCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BinaryConnectConvolution, BinaryConnectConvolutionCudaf, 1, "cuda", "default", int, const vector<int> &, const vector<int> &, const vector<int> &, int);
  typedef INQAffineCuda<float, int> INQAffineCudafi;
  NBLA_REGISTER_FUNCTION_IMPL(INQAffine, INQAffineCudafi, 1, "cuda", "default", int, int, const vector<int> &, const string &, int);
  typedef INQConvolutionCuda<float, int> INQConvolutionCudafi;
  NBLA_REGISTER_FUNCTION_IMPL(INQConvolution, INQConvolutionCudafi, 1, "cuda", "default", int, const vector<int> &, const vector<int> &, const vector<int> &, int, int, const vector<int> &, const string &, int);
  typedef FixedPointQuantizeCuda<float> FixedPointQuantizeCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(FixedPointQuantize, FixedPointQuantizeCudaf, 1, "cuda", "default", bool, int, float, bool);
  typedef Pow2QuantizeCuda<float> Pow2QuantizeCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(Pow2Quantize, Pow2QuantizeCudaf, 1, "cuda", "default", bool, bool, int, int, bool);
  typedef TopNErrorCuda<float, int> TopNErrorCudafi;
  NBLA_REGISTER_FUNCTION_IMPL(TopNError, TopNErrorCudafi, 1, "cuda", "default", int, int);
  typedef BinaryErrorCuda<float> BinaryErrorCudaf;
  NBLA_REGISTER_FUNCTION_IMPL(BinaryError, BinaryErrorCudaf, 1, "cuda", "default");

  // Solver registration
  typedef AdadeltaCuda<float> AdadeltaCudaf;
  NBLA_REGISTER_SOLVER_IMPL(Adadelta, AdadeltaCudaf, 1, "cuda", "default", float, float,
    float);
  typedef AdagradCuda<float> AdagradCudaf;
  NBLA_REGISTER_SOLVER_IMPL(Adagrad, AdagradCudaf, 1, "cuda", "default", float, float);
  typedef AdamCuda<float> AdamCudaf;
  NBLA_REGISTER_SOLVER_IMPL(Adam, AdamCudaf, 1, "cuda", "default", float, float,
    float, float);
  typedef AdamaxCuda<float> AdamaxCudaf;
  NBLA_REGISTER_SOLVER_IMPL(Adamax, AdamaxCudaf, 1, "cuda", "default", float, float,
    float, float);
  typedef MomentumCuda<float> MomentumCudaf;
  NBLA_REGISTER_SOLVER_IMPL(Momentum, MomentumCudaf, 1, "cuda", "default", float, float);
  typedef NesterovCuda<float> NesterovCudaf;
  NBLA_REGISTER_SOLVER_IMPL(Nesterov, NesterovCudaf, 1, "cuda", "default", float, float);
  typedef RMSpropCuda<float> RMSpropCudaf;
  NBLA_REGISTER_SOLVER_IMPL(RMSprop, RMSpropCudaf, 1, "cuda", "default", float, float,
    float);
  typedef SgdCuda<float> SgdCudaf;
  NBLA_REGISTER_SOLVER_IMPL(Sgd, SgdCudaf, 1, "cuda", "default", float);

  // Communicator registration
#ifdef FEATURE_DIST_TRAIN
  typedef DataParallelCommunicatorNccl<float> DataParallelCommunicatorNcclf;
  NBLA_REGISTER_COMMUNICATOR_IMPL(DataParallelCommunicator, DataParallelCommunicatorNcclf, 1, "cuda", "default");
  typedef MultiProcessDataParallelCommunicatorNccl<float> MultiProcessDataParallelCommunicatorNcclf;
  NBLA_REGISTER_COMMUNICATOR_IMPL(MultiProcessDataParallelCommunicator, MultiProcessDataParallelCommunicatorNcclf, 1, "cuda", "default");
#endif

  is_initialized = true;
}

void clear_cuda_memory_cache() {
  SingletonManager::get<Cuda>()->memcache().clear();
}

/** Get CUDA array classes.
*/
vector<string> cuda_array_classes() {
  return SingletonManager::get<Cuda>()->array_classes();
}

/** Set CUDA array classes
*/
void _cuda_set_array_classes(const vector<string> &a) {
  return SingletonManager::get<Cuda>()->_set_array_classes(a);
}

void cuda_device_synchronize(int device) {
  cuda_set_device(device);
  NBLA_CUDA_CHECK(cudaDeviceSynchronize());
}

int cuda_get_device_count() {
  int count;
  NBLA_CUDA_CHECK(cudaGetDeviceCount(&count));
  return count;
}

}

