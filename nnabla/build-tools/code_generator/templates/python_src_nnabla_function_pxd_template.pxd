# Copyright (c) 2017 Sony Corporation. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# *WARNING*
# THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
# PLEASE DO NOT EDIT THIS FILE BY HAND!
# If you want to modify this file, edit following files.
# - build-tools/code_generator/templates/python_src_nnabla_function_pxd_template.pxd
# - build-tools/code_generator/generator/generate_python_src_nnabla_function_pxd.py

from libcpp.vector cimport vector
from libcpp.string cimport string
from libcpp.memory cimport shared_ptr
from libcpp cimport bool as cpp_bool
cimport _variable
from _variable cimport CVariable, CContext, dtypes, VariablePtr

ctypedef vector[CVariable*] Variables

cdef extern from "nbla/function.hpp" namespace "nbla":

    cdef cppclass CFunction "nbla::Function":
        void setup(const Variables&, const Variables&) nogil except +
        void forward(const Variables&, const Variables&) nogil except +
        void backward(const Variables&, const Variables&, const vector[cpp_bool] &accum) nogil except +
        vector[dtypes] in_types()
        vector[dtypes] out_types()
        int min_inputs()
        int min_outputs()
        string name()
        shared_ptr[CFunction] copy() except +
        cpp_bool grad_depends_output_data(int i, int o) except+
        int inplace_data(int i) except+
        int inplace_data_with(int i) except+
        int inplace_grad(int i) except+
        int inplace_grad_with(int i) except+

    ctypedef shared_ptr[CFunction] FunctionPtr

cdef extern from "nbla/computation_graph/function.hpp" namespace "nbla":
    cdef cppclass CgVariable
    ctypedef shared_ptr[CgVariable] CgVariablePtr
    cdef cppclass CgFunction:
        CgFunction(FunctionPtr func) except+
        FunctionPtr function() const
        cpp_bool need_grad() const
        cpp_bool update_need_grad() except+
        int rank() const
        void set_outputs(const vector[CgVariablePtr] &outputs) except+
        vector[CgVariablePtr] inputs()
        vector[CgVariablePtr] outputs()
        vector[CVariable *] function_inputs() except+
        vector[VariablePtr] function_outputs_shared() except+
        string info() const
        void set_info(const string &info)
    ctypedef shared_ptr[CgFunction] CgFunctionPtr
    
cdef extern from "nbla/function/callback.hpp":
    shared_ptr[CFunction] create_Callback "std::make_shared<nbla::Callback>" (
        const CContext &, void *,
        void(void *, const Variables&, const Variables &) nogil except+,
        void(void *, const Variables&, const Variables &) nogil except+,
        void(void *, const Variables&, const Variables &,
             const vector[cpp_bool] &, const vector[cpp_bool] &) nogil except+,
        void(void *) nogil) except +
    
{function_definitions}

cdef class Function:
    cdef CgFunctionPtr fun
    cdef CgFunction *funp
    cdef public object info
    @staticmethod
    cdef create(shared_ptr[CFunction] fun, info)
    @staticmethod
    cdef create_from_c(CgFunctionPtr fun)
