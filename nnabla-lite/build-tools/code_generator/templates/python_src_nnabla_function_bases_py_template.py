# Copyright (c) 2017 Sony Corporation. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# *WARNING*
# THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
# PLEASE DO NOT EDIT THIS FILE BY HAND!
# If you want to modify this file, edit following files.
# - build-tools/code_generator/templates/python_src_nnabla_function_bases_py_template.py
# - build-tools/code_generator/generator/generate_python_src_nnabla_function_bases_py.py

from __future__ import absolute_import

from .context import get_current_context
from . import function as F
from .auto_forward import get_auto_forward

import inspect


# Templates for function_api source building.
FUNCTION_API_HEADER = "def {{name}}{{signature}}:"
FUNCTION_API_BODY = '''ctx = get_current_context()
return _func_(ctx, {{shortsignature}})'''


def function_api(func):
    """
    Decorator for making function called with current context.
    Some tricky things are done here so that signature and docstring are available.
    """
    name = func.__name__
    doc = func.__doc__
    if doc is None:
        doc = "No docstring."

    # Parsing argspecs
    spec = inspect.getargspec(func)
    defaults = spec.defaults
    if spec.defaults is None:
        defaults = None
    elif len(spec.defaults) == len(spec.args):
        defaults = defaults[1:]
    # Creating signature
    # e.g. (x, weights, biases=None, n_outputs=None)
    signature = inspect.formatargspec(
        spec.args[1:], spec.varargs, spec.keywords, defaults)
    # Creating signature without parans and defaults
    # e.g. x, weights, biases, n_outputs
    shortsignature = inspect.formatargspec(
        spec.args[1:], spec.varargs, spec.keywords, None)[1:-1]

    # Create code by string
    src = (FUNCTION_API_HEADER + '\n' + '\n'.join(map(lambda x: '    ' +
                                                      x, FUNCTION_API_BODY.splitlines()))).format(**locals())

    # Evaluate source code from string
    code = compile(src, "<{{name}}>".format(**locals()), 'single')
    execdict = dict(_func_=func, get_current_context=get_current_context)
    exec(code, execdict)

    # Get created function.
    newfunc = execdict[name]
    # DOC newfunc.__doc__ = FUNCTION_API_DOC.format(**locals())
    doc += '''

    Note:
        All nnabla functions in :obj:`nnabla.functions` are decorated with the :obj:`nnabla.function_bases.function_api` decorator,
        which queries the current context and passes it into the first argument of the
        original function. The original function always takes a context as the first argument.

    '''
    newfunc.__doc__ = doc
    newfunc.__source__ = src
    newfunc.__function_api_base__ = func
    newfunc.__module__ = __name__
    return newfunc


{function_apis}
